---
announce:
  linkedin:
    enabled: false
    message_template: 'Probundle {{ .Tag }} is out! Check it out at {{ .ReleaseURL }}.'
  reddit:
    application_id: O3UxD7HlPpcN88gpEkPIXQ
    enabled: false
    title_template: 'Probundle {{ .Tag }} was just released!'
    url_template: 'https://github.com/megabyte-labs/Probundle/releases/tag/{{ .Tag }}'
    username: tsgangster
  skip: '{{gt .Patch 0}}'
  slack:
    channel: '#misc'
    enabled: true
    icon_url: 'https://gitlab.com/megabyte-labs/misc/assets/-/raw/master/logo/megabytelabs-color-icon-350x350.png'
    message_template: '**[Probundle](https://github.com/megabyte-labs/Probundle)** {{.Tag}} is out! Check it out at {{.ReleaseURL}}.'
    username: Megabyte Labs Release Notification Bot
  teams:
    color: '#1DA1F2'
    enabled: false
    icon_url: 'https://gitlab.com/megabyte-labs/misc/assets/-/raw/master/logo/megabytelabs-color-icon-350x350.png'
    message_template: 'Probundle {{ .Tag }} is out! Check it out at {{ .ReleaseURL }}.'
    title_template: 'Probundle {{ .Tag }} has been released!'
  twitter:
    enabled: false
    message_template: 'Probundle {{ .Tag }} is out with new features! Check it out at {{ .ReleaseURL }}.'

archives:
  - files:
      - README.md
      - LICENSE
      - completion/**/*
    format_overrides:
      - format: zip
        goos: windows

brews:
  - description: 'A tool that handles compressing, bundling, and unpacking production node_modules dependencies that you want to store in source control'
    folder: Formula
    homepage: 'https://megabyte.space'
    install: |-
      bin.install "probundle"
      bash_completion.install "completion/bash/probundle.bash" => "probundle"
      zsh_completion.install "completion/zsh/_probundle" => "_probundle"
      fish_completion.install "completion/fish/probundle.fish"
    license: MIT
    name: probundle
    tap:
      name: homebrew-tap
      owner: installdoc
    test: ''

builds:
  binary: probundle
  goarch:
    - amd64
  hooks:
    post: task npm:build:pkg
  main: .config/dummy.go

checksum:
  name_template: CHECKSUMS.txt

dist: build

dockers:
  - build_flag_templates:
      - --platform=linux/amd64
    dockerfile: .config/Dockerfile
    goarch: amd64
    goos: linux
    image_templates:
      - 'megabytelabs/{{.ProjectName}}'
      - 'megabytelabs/{{.ProjectName}}:{{.Tag}}'
      - 'megabytelabs/{{.ProjectName}}:v{{ .Major }}'
    use: buildx

gomod:
  proxy:

nfpms:
  - description: 'A tool that handles compressing, bundling, and unpacking production node_modules dependencies that you want to store in source control'
    formats:
      - apk
      - deb
      - rpm
    homepage: 'https://megabyte.space'
    id: default
    license: MIT
    maintainer: Megabyte Labs <help@megabyte.space>
    recommends:
      - git
    suggests:
      - docker
      - jq
      - yq
    vendor: Megabyte LLC

project_name: Probundle

release:
  disable: true

# eslint-disable max-len
snapcrafts:
  - confinement: ''
    # yamllint disable-line rule:line-length
    description: '**Probundle** is a project that brings [pac](https://www.npmjs.com/package/pac) back to life (and support modern versions of Node.js. To achieve the fastest deployments possible, the production &#x60;node_modules/&#x60; (not devDependencies or any of that optional stuff) can be compressed by running &#x60;probundle pack&#x60; and stored in source control. Then, when deployment time comes all you have to do is uncompress or run &#x60;probundle unpack&#x60;. This works well when you also run [node-prune](https://github.com/tj/node-prune) on your &#x60;node_modules/&#x60; folder, before compressing your production dependencies. We even take it a step further in some cases and create global shared configurations for libraries like [ESLint](https://github.com/ProfessorManhattan/eslint-config-strict-mode) and [Prettier](https://github.com/ProfessorManhattan/prettier-config-sexy-mode) that dynamically load their plugins into &#x60;node_modules/&#x60; by downloading compressed plugins from source control without having to run &#x60;npm install&#x60;. We fuss about the performance of our &#x60;node_modules/&#x60; installation time because it is often a bottleneck.'
    extra_files:
      - destination: completion
        mode: 0755
        source: completion
    id: default
    license: MIT
    publish: true
    summary: 'A tool that handles compressing, bundling, and unpacking production node_modules dependencies that you want to store in source control'
# eslint-enable max-len

snapshot:
  name_template: '{{.Tag}}'

universal_binaries:
  - replace: true
